---
description: 
globs: 
alwaysApply: true
---
# Project Overview

Akta is a system designed to enable secure and verifiable interactions between AI agents. It establishes a robust framework for capability-based access control, allowing agents to confidently delegate tasks and share resources with fine-grained control by means of Verifiable Credentials. The system leverages concepts from Decentralized Identifiers (DIDs) and Verifiable Credentials (VCs) to create a cryptographically secure and auditable environment for autonomous agent operations.

The project always adheres to strict compliance to the specifications:
- https://www.w3.org/TR/did-1.0/
- https://www.w3.org/TR/vc-data-model-2.0/

## Project structure and overview of file functionality

Each file is provided with a description, marked by by hashtag
├── Makefile # all common commands , pytest, running the application and stored in the Makefile
├── README.md # Readme is always considered for update after performing work. Never use emojis or over friendly language, keep it formal
├── akta # the root folder of the application
│   ├── a2a
│   │   └── models.py # this models file is imported from an upstream project, you never change this 
│   ├── cli.py # the root CLI file that sets up each subcommand
│   ├── commands # the folder containing subcommmands
│   │   ├── __init__.py
│   │   ├── claim.py # Create and manage Verifiable Credentials using Linked Data
│   │   ├── keys.py # Create and manage keys for DID Documents
│   │   ├── registry.py # Manage Verifiable Credentials in a Verifiable Data Registry (which is in folder `akra/cdr`)
│   │   ├── token.py # Generate or verify Bearer Tokens from signed VC
│   │   └── vdr.py # Akta Verifiable Data Registry Server Management CLI (start server)
│   ├── config.py # sets up config management
│   ├── logging.py # sets up application logging 
│   ├── server.py # setsup FastAPI, APIRouter, and middleware
│   ├── utils
│   │   └── key_utils.py # general helper functions for key management
│   ├── utils.py
│   └── vdr
│       ├── __init__.py
│       ├── crud.py # database crud
│       ├── database.py # sqlalchemy create_engine, create_tables etc
│       ├── models.py # declarative_base and sessionmaker 
│       ├── router.py # route handling for vdr (@router.get, @router.post etc)
│       └── schemas.py # pydantic models for the database schema
├── pyproject.toml
├── uv.lock
